// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokerApi.Data;

namespace PokerApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210311025010_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("PokerApi.Model.Entities.FinancialEntity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int")
                        .HasColumnName("PlaceId");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("PlayerId");

                    b.Property<float>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("Balance");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.HasKey("PlaceId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Financial");
                });

            modelBuilder.Entity("PokerApi.Model.Entities.PlaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.HasKey("Id");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("PokerApi.Model.Entities.PlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("User");

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("PokerApi.Model.Entities.FinancialEntity", b =>
                {
                    b.HasOne("PokerApi.Model.Entities.PlaceEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerApi.Model.Entities.PlayerEntity", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
